import numpy as np
from matplotlib import pylab as plt
def simulate_gaussian(sig=0.5,amp=1,x,x0=0):
    dat=np.exp(-0.5*(x-x0)**2/sig**2)*amp
    dat+=np.random.randn(x.size)
    return dat

def sim_lorentzian(x,a=1.0,b=1.0,c=1.0):
    dat=a/(b+(x-c)**2)
    dat+=np.random.randn(x.size)
    return dat  

def get_trial_offset(sigs):
    return sigs*np.random.randn(sigs.size)

class Gaussian:
    def __init__(self,x,sig=0.5,amp=1.0,x0=0,offset=0):
        self.x=x
        self.y=simulate_gaussian(sig,amp,x,x0)+offset
        self.err=numpy.ones(t.size)
        self.sig=sig
        self.amp=amp
        self.x0=x0
        self.offset=offset

    def get_chisq(self,vec):
        sig=vec[0]
        amp=vec[1]
        x0=vec[2]
        off=vec[3]

        pred=off+amp*np.exp(-0.5*(self.x-x0)**2/sig**2)
        chisq=np.sum(  (self.y-pred)**2/self.err**2)
        return chisq
class Lorentzian:
    
    def __init__(self,x,a=1.0,b=1.0,x0=1.0,offset=0):
        self.x=x
        self.y=sim_lorentzian(x,a,b,c)+offset
        self.a=a
        self.err=np.ones(x.size)
        self.b=b
        self.c=c
        self.offset=offset
        
    def get_chisq(self,vec):
        a=vec[0]
        b=vec[1]
        c=vec[2]   
        
        off=vec[3]
        
        pred=off+a/(b+(self.x-c)**2)
        chisq=np.sum(  (self.y-pred)**2/self.err**2)
        return chisq
        
def run_mcmc(data,start_pos,nstep,scale=None):
    nparam=start_pos.size
    params=np.zeros([nstep,nparam+1])
    params[0,0:-1]=start_pos
    cur_chisq=data.get_chisq(start_pos)
    cur_pos=start_pos.copy()
    if scale==None:
        scale=np.ones(nparam)
    for i in range(1,nstep):
        new_pos=cur_pos+get_trial_offset(scale)
        new_chisq=data.get_chisq(new_pos)
        if new_chisq<cur_chisq:
            accept=True
        else:
            delt=new_chisq-cur_chisq
            prob=np.exp(-0.5*delt)
            if np.random.rand()<prob:
                accept=True
            else:
                accept=False
        if accept: 
            cur_pos=new_pos
            cur_chisq=new_chisq
        params[i,0:-1]=cur_pos
        params[i,-1]=cur_chisq
    return params


if __name__=='__main__':
    
    x=numpy.arange(-4.5,4.5,0.01)
    dat=Lorentzian(x,b=2.5)

    guess=np.array([0.3,0.3,0.3,-0.2])
    scale=np.array([0.01,0.01,0.01,0.01])
    nstep=100000
    chain=run_mcmc(dat,guess,nstep,scale)
    nn=np.round(0.2*nstep)
    chain=chain[nn:,:]
    
    param_true=np.array([dat.a,dat.b,dat.x0,dat.offset])
    for i in range(0,param_true.size):
        val=np.mean(chain[:,i])
        scat=np.std(chain[:,i])
        print [param_true[i],val,scat]
